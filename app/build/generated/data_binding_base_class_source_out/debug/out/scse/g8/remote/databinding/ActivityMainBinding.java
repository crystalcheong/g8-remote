// Generated by view binder compiler. Do not edit!
package scse.g8.remote.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import scse.g8.remote.MapArena;
import scse.g8.remote.R;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ImageButton arrowBack;

  @NonNull
  public final ImageButton arrowForward;

  @NonNull
  public final ImageButton arrowLeft;

  @NonNull
  public final ImageButton arrowNE;

  @NonNull
  public final ImageButton arrowNW;

  @NonNull
  public final ImageButton arrowRight;

  @NonNull
  public final ImageButton arrowSE;

  @NonNull
  public final ImageButton arrowSW;

  @NonNull
  public final ImageView blank;

  @NonNull
  public final TableLayout btnTableLayout;

  @NonNull
  public final TableRow btnfirstRow;

  @NonNull
  public final ImageButton calculate;

  @NonNull
  public final Button connectButton;

  @NonNull
  public final TextView connectText;

  @NonNull
  public final CoordinatorLayout coordinatorlayout;

  @NonNull
  public final TableLayout dPad;

  @NonNull
  public final Button discoverableBtn;

  @NonNull
  public final TableRow dpadRow1;

  @NonNull
  public final TableRow dpadRow2;

  @NonNull
  public final TableRow dpadRow3;

  @NonNull
  public final EditText editText;

  @NonNull
  public final Button faceEast;

  @NonNull
  public final Button faceNorth;

  @NonNull
  public final Button faceSouth;

  @NonNull
  public final Button faceWest;

  @NonNull
  public final Button finaliseRobot;

  @NonNull
  public final TableRow firstRow;

  @NonNull
  public final TableRow fourthRow;

  @NonNull
  public final ConstraintLayout fullScreen;

  @NonNull
  public final ImageButton generateRobot;

  @NonNull
  public final TableLayout generator;

  @NonNull
  public final TableRow generatorHeader;

  @NonNull
  public final ContentMainBinding include;

  @NonNull
  public final ConstraintLayout initialObstacle;

  @NonNull
  public final ImageView initialObstacleBox;

  @NonNull
  public final ImageView initialObstacleFace;

  @NonNull
  public final TextView initialObstacleId;

  @NonNull
  public final MapArena mapView;

  @NonNull
  public final TextView notifications;

  @NonNull
  public final TextView notificationsHeader;

  @NonNull
  public final Spinner numberOfPreloadedObstacles;

  @NonNull
  public final ImageView obstacleBackground;

  @NonNull
  public final TextView obstacleCoordinates;

  @NonNull
  public final TextView obstacleGenerator;

  @NonNull
  public final TableLayout obstacleInformation;

  @NonNull
  public final TextView pacbotGenerator;

  @NonNull
  public final TextView pathText;

  @NonNull
  public final TextView popupRobotText;

  @NonNull
  public final ConstraintLayout popupWindow;

  @NonNull
  public final ConstraintLayout popupWindowRobot;

  @NonNull
  public final Button preloadObstaclesButton;

  @NonNull
  public final Button removeRobot;

  @NonNull
  public final Button resetObstacles;

  @NonNull
  public final TextView resetText;

  @NonNull
  public final Switch reverseSwitch;

  @NonNull
  public final TextView robotLocation;

  @NonNull
  public final TextView robotLocationHeader;

  @NonNull
  public final TextView robotText;

  @NonNull
  public final ImageView robotcar;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final TableRow secondBtnRow;

  @NonNull
  public final TableRow secondRow;

  @NonNull
  public final Button sendMap;

  @NonNull
  public final Spinner spinnerRobotFacing;

  @NonNull
  public final Spinner spinnerRobotX;

  @NonNull
  public final Spinner spinnerRobotY;

  @NonNull
  public final Button startRobot;

  @NonNull
  public final TextView startText;

  @NonNull
  public final TableLayout textTableLayout;

  @NonNull
  public final TableRow thirdRow;

  @NonNull
  public final Toolbar toolbar;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull ImageButton arrowBack,
      @NonNull ImageButton arrowForward, @NonNull ImageButton arrowLeft,
      @NonNull ImageButton arrowNE, @NonNull ImageButton arrowNW, @NonNull ImageButton arrowRight,
      @NonNull ImageButton arrowSE, @NonNull ImageButton arrowSW, @NonNull ImageView blank,
      @NonNull TableLayout btnTableLayout, @NonNull TableRow btnfirstRow,
      @NonNull ImageButton calculate, @NonNull Button connectButton, @NonNull TextView connectText,
      @NonNull CoordinatorLayout coordinatorlayout, @NonNull TableLayout dPad,
      @NonNull Button discoverableBtn, @NonNull TableRow dpadRow1, @NonNull TableRow dpadRow2,
      @NonNull TableRow dpadRow3, @NonNull EditText editText, @NonNull Button faceEast,
      @NonNull Button faceNorth, @NonNull Button faceSouth, @NonNull Button faceWest,
      @NonNull Button finaliseRobot, @NonNull TableRow firstRow, @NonNull TableRow fourthRow,
      @NonNull ConstraintLayout fullScreen, @NonNull ImageButton generateRobot,
      @NonNull TableLayout generator, @NonNull TableRow generatorHeader,
      @NonNull ContentMainBinding include, @NonNull ConstraintLayout initialObstacle,
      @NonNull ImageView initialObstacleBox, @NonNull ImageView initialObstacleFace,
      @NonNull TextView initialObstacleId, @NonNull MapArena mapView,
      @NonNull TextView notifications, @NonNull TextView notificationsHeader,
      @NonNull Spinner numberOfPreloadedObstacles, @NonNull ImageView obstacleBackground,
      @NonNull TextView obstacleCoordinates, @NonNull TextView obstacleGenerator,
      @NonNull TableLayout obstacleInformation, @NonNull TextView pacbotGenerator,
      @NonNull TextView pathText, @NonNull TextView popupRobotText,
      @NonNull ConstraintLayout popupWindow, @NonNull ConstraintLayout popupWindowRobot,
      @NonNull Button preloadObstaclesButton, @NonNull Button removeRobot,
      @NonNull Button resetObstacles, @NonNull TextView resetText, @NonNull Switch reverseSwitch,
      @NonNull TextView robotLocation, @NonNull TextView robotLocationHeader,
      @NonNull TextView robotText, @NonNull ImageView robotcar, @NonNull Button saveButton,
      @NonNull TableRow secondBtnRow, @NonNull TableRow secondRow, @NonNull Button sendMap,
      @NonNull Spinner spinnerRobotFacing, @NonNull Spinner spinnerRobotX,
      @NonNull Spinner spinnerRobotY, @NonNull Button startRobot, @NonNull TextView startText,
      @NonNull TableLayout textTableLayout, @NonNull TableRow thirdRow, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.arrowBack = arrowBack;
    this.arrowForward = arrowForward;
    this.arrowLeft = arrowLeft;
    this.arrowNE = arrowNE;
    this.arrowNW = arrowNW;
    this.arrowRight = arrowRight;
    this.arrowSE = arrowSE;
    this.arrowSW = arrowSW;
    this.blank = blank;
    this.btnTableLayout = btnTableLayout;
    this.btnfirstRow = btnfirstRow;
    this.calculate = calculate;
    this.connectButton = connectButton;
    this.connectText = connectText;
    this.coordinatorlayout = coordinatorlayout;
    this.dPad = dPad;
    this.discoverableBtn = discoverableBtn;
    this.dpadRow1 = dpadRow1;
    this.dpadRow2 = dpadRow2;
    this.dpadRow3 = dpadRow3;
    this.editText = editText;
    this.faceEast = faceEast;
    this.faceNorth = faceNorth;
    this.faceSouth = faceSouth;
    this.faceWest = faceWest;
    this.finaliseRobot = finaliseRobot;
    this.firstRow = firstRow;
    this.fourthRow = fourthRow;
    this.fullScreen = fullScreen;
    this.generateRobot = generateRobot;
    this.generator = generator;
    this.generatorHeader = generatorHeader;
    this.include = include;
    this.initialObstacle = initialObstacle;
    this.initialObstacleBox = initialObstacleBox;
    this.initialObstacleFace = initialObstacleFace;
    this.initialObstacleId = initialObstacleId;
    this.mapView = mapView;
    this.notifications = notifications;
    this.notificationsHeader = notificationsHeader;
    this.numberOfPreloadedObstacles = numberOfPreloadedObstacles;
    this.obstacleBackground = obstacleBackground;
    this.obstacleCoordinates = obstacleCoordinates;
    this.obstacleGenerator = obstacleGenerator;
    this.obstacleInformation = obstacleInformation;
    this.pacbotGenerator = pacbotGenerator;
    this.pathText = pathText;
    this.popupRobotText = popupRobotText;
    this.popupWindow = popupWindow;
    this.popupWindowRobot = popupWindowRobot;
    this.preloadObstaclesButton = preloadObstaclesButton;
    this.removeRobot = removeRobot;
    this.resetObstacles = resetObstacles;
    this.resetText = resetText;
    this.reverseSwitch = reverseSwitch;
    this.robotLocation = robotLocation;
    this.robotLocationHeader = robotLocationHeader;
    this.robotText = robotText;
    this.robotcar = robotcar;
    this.saveButton = saveButton;
    this.secondBtnRow = secondBtnRow;
    this.secondRow = secondRow;
    this.sendMap = sendMap;
    this.spinnerRobotFacing = spinnerRobotFacing;
    this.spinnerRobotX = spinnerRobotX;
    this.spinnerRobotY = spinnerRobotY;
    this.startRobot = startRobot;
    this.startText = startText;
    this.textTableLayout = textTableLayout;
    this.thirdRow = thirdRow;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.arrowBack;
      ImageButton arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.arrowForward;
      ImageButton arrowForward = ViewBindings.findChildViewById(rootView, id);
      if (arrowForward == null) {
        break missingId;
      }

      id = R.id.arrowLeft;
      ImageButton arrowLeft = ViewBindings.findChildViewById(rootView, id);
      if (arrowLeft == null) {
        break missingId;
      }

      id = R.id.arrowNE;
      ImageButton arrowNE = ViewBindings.findChildViewById(rootView, id);
      if (arrowNE == null) {
        break missingId;
      }

      id = R.id.arrowNW;
      ImageButton arrowNW = ViewBindings.findChildViewById(rootView, id);
      if (arrowNW == null) {
        break missingId;
      }

      id = R.id.arrowRight;
      ImageButton arrowRight = ViewBindings.findChildViewById(rootView, id);
      if (arrowRight == null) {
        break missingId;
      }

      id = R.id.arrowSE;
      ImageButton arrowSE = ViewBindings.findChildViewById(rootView, id);
      if (arrowSE == null) {
        break missingId;
      }

      id = R.id.arrowSW;
      ImageButton arrowSW = ViewBindings.findChildViewById(rootView, id);
      if (arrowSW == null) {
        break missingId;
      }

      id = R.id.blank;
      ImageView blank = ViewBindings.findChildViewById(rootView, id);
      if (blank == null) {
        break missingId;
      }

      id = R.id.btnTableLayout;
      TableLayout btnTableLayout = ViewBindings.findChildViewById(rootView, id);
      if (btnTableLayout == null) {
        break missingId;
      }

      id = R.id.btnfirstRow;
      TableRow btnfirstRow = ViewBindings.findChildViewById(rootView, id);
      if (btnfirstRow == null) {
        break missingId;
      }

      id = R.id.calculate;
      ImageButton calculate = ViewBindings.findChildViewById(rootView, id);
      if (calculate == null) {
        break missingId;
      }

      id = R.id.connect_button;
      Button connectButton = ViewBindings.findChildViewById(rootView, id);
      if (connectButton == null) {
        break missingId;
      }

      id = R.id.connect_Text;
      TextView connectText = ViewBindings.findChildViewById(rootView, id);
      if (connectText == null) {
        break missingId;
      }

      CoordinatorLayout coordinatorlayout = (CoordinatorLayout) rootView;

      id = R.id.d_pad;
      TableLayout dPad = ViewBindings.findChildViewById(rootView, id);
      if (dPad == null) {
        break missingId;
      }

      id = R.id.discoverableBtn;
      Button discoverableBtn = ViewBindings.findChildViewById(rootView, id);
      if (discoverableBtn == null) {
        break missingId;
      }

      id = R.id.dpad_row1;
      TableRow dpadRow1 = ViewBindings.findChildViewById(rootView, id);
      if (dpadRow1 == null) {
        break missingId;
      }

      id = R.id.dpad_row2;
      TableRow dpadRow2 = ViewBindings.findChildViewById(rootView, id);
      if (dpadRow2 == null) {
        break missingId;
      }

      id = R.id.dpad_row3;
      TableRow dpadRow3 = ViewBindings.findChildViewById(rootView, id);
      if (dpadRow3 == null) {
        break missingId;
      }

      id = R.id.editText;
      EditText editText = ViewBindings.findChildViewById(rootView, id);
      if (editText == null) {
        break missingId;
      }

      id = R.id.face_east;
      Button faceEast = ViewBindings.findChildViewById(rootView, id);
      if (faceEast == null) {
        break missingId;
      }

      id = R.id.face_north;
      Button faceNorth = ViewBindings.findChildViewById(rootView, id);
      if (faceNorth == null) {
        break missingId;
      }

      id = R.id.face_south;
      Button faceSouth = ViewBindings.findChildViewById(rootView, id);
      if (faceSouth == null) {
        break missingId;
      }

      id = R.id.face_west;
      Button faceWest = ViewBindings.findChildViewById(rootView, id);
      if (faceWest == null) {
        break missingId;
      }

      id = R.id.finalise_robot;
      Button finaliseRobot = ViewBindings.findChildViewById(rootView, id);
      if (finaliseRobot == null) {
        break missingId;
      }

      id = R.id.firstRow;
      TableRow firstRow = ViewBindings.findChildViewById(rootView, id);
      if (firstRow == null) {
        break missingId;
      }

      id = R.id.fourthRow;
      TableRow fourthRow = ViewBindings.findChildViewById(rootView, id);
      if (fourthRow == null) {
        break missingId;
      }

      id = R.id.fullScreen;
      ConstraintLayout fullScreen = ViewBindings.findChildViewById(rootView, id);
      if (fullScreen == null) {
        break missingId;
      }

      id = R.id.generateRobot;
      ImageButton generateRobot = ViewBindings.findChildViewById(rootView, id);
      if (generateRobot == null) {
        break missingId;
      }

      id = R.id.generator;
      TableLayout generator = ViewBindings.findChildViewById(rootView, id);
      if (generator == null) {
        break missingId;
      }

      id = R.id.generator_header;
      TableRow generatorHeader = ViewBindings.findChildViewById(rootView, id);
      if (generatorHeader == null) {
        break missingId;
      }

      id = R.id.include;
      View include = ViewBindings.findChildViewById(rootView, id);
      if (include == null) {
        break missingId;
      }
      ContentMainBinding binding_include = ContentMainBinding.bind(include);

      id = R.id.initialObstacle;
      ConstraintLayout initialObstacle = ViewBindings.findChildViewById(rootView, id);
      if (initialObstacle == null) {
        break missingId;
      }

      id = R.id.initialObstacleBox;
      ImageView initialObstacleBox = ViewBindings.findChildViewById(rootView, id);
      if (initialObstacleBox == null) {
        break missingId;
      }

      id = R.id.initialObstacleFace;
      ImageView initialObstacleFace = ViewBindings.findChildViewById(rootView, id);
      if (initialObstacleFace == null) {
        break missingId;
      }

      id = R.id.initialObstacleId;
      TextView initialObstacleId = ViewBindings.findChildViewById(rootView, id);
      if (initialObstacleId == null) {
        break missingId;
      }

      id = R.id.mapView;
      MapArena mapView = ViewBindings.findChildViewById(rootView, id);
      if (mapView == null) {
        break missingId;
      }

      id = R.id.notifications;
      TextView notifications = ViewBindings.findChildViewById(rootView, id);
      if (notifications == null) {
        break missingId;
      }

      id = R.id.notificationsHeader;
      TextView notificationsHeader = ViewBindings.findChildViewById(rootView, id);
      if (notificationsHeader == null) {
        break missingId;
      }

      id = R.id.numberOfPreloadedObstacles;
      Spinner numberOfPreloadedObstacles = ViewBindings.findChildViewById(rootView, id);
      if (numberOfPreloadedObstacles == null) {
        break missingId;
      }

      id = R.id.obstacle_background;
      ImageView obstacleBackground = ViewBindings.findChildViewById(rootView, id);
      if (obstacleBackground == null) {
        break missingId;
      }

      id = R.id.obstacleCoordinates;
      TextView obstacleCoordinates = ViewBindings.findChildViewById(rootView, id);
      if (obstacleCoordinates == null) {
        break missingId;
      }

      id = R.id.obstacleGenerator;
      TextView obstacleGenerator = ViewBindings.findChildViewById(rootView, id);
      if (obstacleGenerator == null) {
        break missingId;
      }

      id = R.id.obstacleInformation;
      TableLayout obstacleInformation = ViewBindings.findChildViewById(rootView, id);
      if (obstacleInformation == null) {
        break missingId;
      }

      id = R.id.pacbotGenerator;
      TextView pacbotGenerator = ViewBindings.findChildViewById(rootView, id);
      if (pacbotGenerator == null) {
        break missingId;
      }

      id = R.id.path_Text;
      TextView pathText = ViewBindings.findChildViewById(rootView, id);
      if (pathText == null) {
        break missingId;
      }

      id = R.id.popup_robotText;
      TextView popupRobotText = ViewBindings.findChildViewById(rootView, id);
      if (popupRobotText == null) {
        break missingId;
      }

      id = R.id.popup_window;
      ConstraintLayout popupWindow = ViewBindings.findChildViewById(rootView, id);
      if (popupWindow == null) {
        break missingId;
      }

      id = R.id.popup_window_robot;
      ConstraintLayout popupWindowRobot = ViewBindings.findChildViewById(rootView, id);
      if (popupWindowRobot == null) {
        break missingId;
      }

      id = R.id.preloadObstaclesButton;
      Button preloadObstaclesButton = ViewBindings.findChildViewById(rootView, id);
      if (preloadObstaclesButton == null) {
        break missingId;
      }

      id = R.id.remove_robot;
      Button removeRobot = ViewBindings.findChildViewById(rootView, id);
      if (removeRobot == null) {
        break missingId;
      }

      id = R.id.resetObstacles;
      Button resetObstacles = ViewBindings.findChildViewById(rootView, id);
      if (resetObstacles == null) {
        break missingId;
      }

      id = R.id.reset_Text;
      TextView resetText = ViewBindings.findChildViewById(rootView, id);
      if (resetText == null) {
        break missingId;
      }

      id = R.id.reverse_switch;
      Switch reverseSwitch = ViewBindings.findChildViewById(rootView, id);
      if (reverseSwitch == null) {
        break missingId;
      }

      id = R.id.robot_location;
      TextView robotLocation = ViewBindings.findChildViewById(rootView, id);
      if (robotLocation == null) {
        break missingId;
      }

      id = R.id.robot_location_header;
      TextView robotLocationHeader = ViewBindings.findChildViewById(rootView, id);
      if (robotLocationHeader == null) {
        break missingId;
      }

      id = R.id.robot_Text;
      TextView robotText = ViewBindings.findChildViewById(rootView, id);
      if (robotText == null) {
        break missingId;
      }

      id = R.id.robotcar;
      ImageView robotcar = ViewBindings.findChildViewById(rootView, id);
      if (robotcar == null) {
        break missingId;
      }

      id = R.id.saveButton;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.secondBtnRow;
      TableRow secondBtnRow = ViewBindings.findChildViewById(rootView, id);
      if (secondBtnRow == null) {
        break missingId;
      }

      id = R.id.secondRow;
      TableRow secondRow = ViewBindings.findChildViewById(rootView, id);
      if (secondRow == null) {
        break missingId;
      }

      id = R.id.sendMap;
      Button sendMap = ViewBindings.findChildViewById(rootView, id);
      if (sendMap == null) {
        break missingId;
      }

      id = R.id.spinner_robot_facing;
      Spinner spinnerRobotFacing = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRobotFacing == null) {
        break missingId;
      }

      id = R.id.spinner_robot_x;
      Spinner spinnerRobotX = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRobotX == null) {
        break missingId;
      }

      id = R.id.spinner_robot_y;
      Spinner spinnerRobotY = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRobotY == null) {
        break missingId;
      }

      id = R.id.start_robot;
      Button startRobot = ViewBindings.findChildViewById(rootView, id);
      if (startRobot == null) {
        break missingId;
      }

      id = R.id.start_Text;
      TextView startText = ViewBindings.findChildViewById(rootView, id);
      if (startText == null) {
        break missingId;
      }

      id = R.id.textTableLayout;
      TableLayout textTableLayout = ViewBindings.findChildViewById(rootView, id);
      if (textTableLayout == null) {
        break missingId;
      }

      id = R.id.thirdRow;
      TableRow thirdRow = ViewBindings.findChildViewById(rootView, id);
      if (thirdRow == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, appBarLayout, arrowBack,
          arrowForward, arrowLeft, arrowNE, arrowNW, arrowRight, arrowSE, arrowSW, blank,
          btnTableLayout, btnfirstRow, calculate, connectButton, connectText, coordinatorlayout,
          dPad, discoverableBtn, dpadRow1, dpadRow2, dpadRow3, editText, faceEast, faceNorth,
          faceSouth, faceWest, finaliseRobot, firstRow, fourthRow, fullScreen, generateRobot,
          generator, generatorHeader, binding_include, initialObstacle, initialObstacleBox,
          initialObstacleFace, initialObstacleId, mapView, notifications, notificationsHeader,
          numberOfPreloadedObstacles, obstacleBackground, obstacleCoordinates, obstacleGenerator,
          obstacleInformation, pacbotGenerator, pathText, popupRobotText, popupWindow,
          popupWindowRobot, preloadObstaclesButton, removeRobot, resetObstacles, resetText,
          reverseSwitch, robotLocation, robotLocationHeader, robotText, robotcar, saveButton,
          secondBtnRow, secondRow, sendMap, spinnerRobotFacing, spinnerRobotX, spinnerRobotY,
          startRobot, startText, textTableLayout, thirdRow, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
