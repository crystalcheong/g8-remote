// Generated by view binder compiler. Do not edit!
package scse.g8.remote.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import scse.g8.remote.R;

public final class ActivityConnectBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton btSend;

  @NonNull
  public final Button btSend1;

  @NonNull
  public final Button connectBtn;

  @NonNull
  public final Button connectCancel;

  @NonNull
  public final TextView deviceInputMsg;

  @NonNull
  public final TextView deviceOutputMsg;

  @NonNull
  public final TextView deviceSearchStatus;

  @NonNull
  public final TextView incomingText;

  @NonNull
  public final ListView listNewDevice;

  @NonNull
  public final EditText messageText;

  @NonNull
  public final ListView pairedDeviceList;

  @NonNull
  public final TextView pairedDeviceText;

  @NonNull
  public final Button searchBtn;

  @NonNull
  public final TextView textView;

  private ActivityConnectBinding(@NonNull ConstraintLayout rootView, @NonNull ImageButton btSend,
      @NonNull Button btSend1, @NonNull Button connectBtn, @NonNull Button connectCancel,
      @NonNull TextView deviceInputMsg, @NonNull TextView deviceOutputMsg,
      @NonNull TextView deviceSearchStatus, @NonNull TextView incomingText,
      @NonNull ListView listNewDevice, @NonNull EditText messageText,
      @NonNull ListView pairedDeviceList, @NonNull TextView pairedDeviceText,
      @NonNull Button searchBtn, @NonNull TextView textView) {
    this.rootView = rootView;
    this.btSend = btSend;
    this.btSend1 = btSend1;
    this.connectBtn = connectBtn;
    this.connectCancel = connectCancel;
    this.deviceInputMsg = deviceInputMsg;
    this.deviceOutputMsg = deviceOutputMsg;
    this.deviceSearchStatus = deviceSearchStatus;
    this.incomingText = incomingText;
    this.listNewDevice = listNewDevice;
    this.messageText = messageText;
    this.pairedDeviceList = pairedDeviceList;
    this.pairedDeviceText = pairedDeviceText;
    this.searchBtn = searchBtn;
    this.textView = textView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityConnectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityConnectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_connect, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityConnectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btSend;
      ImageButton btSend = ViewBindings.findChildViewById(rootView, id);
      if (btSend == null) {
        break missingId;
      }

      id = R.id.btSend1;
      Button btSend1 = ViewBindings.findChildViewById(rootView, id);
      if (btSend1 == null) {
        break missingId;
      }

      id = R.id.connectBtn;
      Button connectBtn = ViewBindings.findChildViewById(rootView, id);
      if (connectBtn == null) {
        break missingId;
      }

      id = R.id.connectCancel;
      Button connectCancel = ViewBindings.findChildViewById(rootView, id);
      if (connectCancel == null) {
        break missingId;
      }

      id = R.id.deviceInputMsg;
      TextView deviceInputMsg = ViewBindings.findChildViewById(rootView, id);
      if (deviceInputMsg == null) {
        break missingId;
      }

      id = R.id.deviceOutputMsg;
      TextView deviceOutputMsg = ViewBindings.findChildViewById(rootView, id);
      if (deviceOutputMsg == null) {
        break missingId;
      }

      id = R.id.deviceSearchStatus;
      TextView deviceSearchStatus = ViewBindings.findChildViewById(rootView, id);
      if (deviceSearchStatus == null) {
        break missingId;
      }

      id = R.id.incomingText;
      TextView incomingText = ViewBindings.findChildViewById(rootView, id);
      if (incomingText == null) {
        break missingId;
      }

      id = R.id.listNewDevice;
      ListView listNewDevice = ViewBindings.findChildViewById(rootView, id);
      if (listNewDevice == null) {
        break missingId;
      }

      id = R.id.messageText;
      EditText messageText = ViewBindings.findChildViewById(rootView, id);
      if (messageText == null) {
        break missingId;
      }

      id = R.id.pairedDeviceList;
      ListView pairedDeviceList = ViewBindings.findChildViewById(rootView, id);
      if (pairedDeviceList == null) {
        break missingId;
      }

      id = R.id.pairedDeviceText;
      TextView pairedDeviceText = ViewBindings.findChildViewById(rootView, id);
      if (pairedDeviceText == null) {
        break missingId;
      }

      id = R.id.searchBtn;
      Button searchBtn = ViewBindings.findChildViewById(rootView, id);
      if (searchBtn == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      return new ActivityConnectBinding((ConstraintLayout) rootView, btSend, btSend1, connectBtn,
          connectCancel, deviceInputMsg, deviceOutputMsg, deviceSearchStatus, incomingText,
          listNewDevice, messageText, pairedDeviceList, pairedDeviceText, searchBtn, textView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
